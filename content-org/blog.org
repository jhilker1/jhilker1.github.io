#+hugo_base_dir: ~/Projects/jhilker.gitlab.io
#+hugo_section: blog/post
#+hugo_type: post
#+hugo_front_matter_format: yaml
#+seq_todo: TODO DRAFT | DONE

* Org-Mode                                                 :@Org__Mode:Emacs:
** DRAFT My Org-Mode Workflow
:properties:
:export_file_name: my-org-mode-workflow
:end:
** DRAFT Why I Built My Emacs Config
:properties:
:export_file_name: why-i-built-my-emacs-config
:end:



* Hugo                                                       :@Hugo:Web__Dev:
** Featuring Blog Posts and Pages in Hugo
:PROPERTIES:
:EXPORT_FILE_NAME: organizing-pages-hugo
:EXPORT_DATE: <2021-02-23 Tue 16:25>
:export_hugo_custom_front_matter: :enableToc true :featured true
:END:

I recently found that the layout for my index page here was cluttered - I had content both in the org-mode file where I would write a post, as well as in the =index.html= file that actually rendered content to the page. I knew I wanted to have a shortcode so that I could more easily use that content again, if I needed to. However, I also knew that I'd want to have a list of both featured posts that I thought were my best work, as well as a list of recent posts on the page. I first used part of the list layout from the theme I'm using here, and created a shortcode for only getting posts from my personal blog, and limiting it to the 5 most recent posts.

{{<highlight html>}}
<ul class="posts-list">
      {{ range first 5 (where .Site.RegularPages "Section" "blog").ByDate.Reverse  }}
        <li class="posts-list-item">
          <a class="posts-list-item-title" href="{{ .Permalink }}">{{ .Title }}</a>
          <span class="posts-list-item-description">
            {{ .Date.Format "02 Jan." }}
          </span>
        </li>
      {{ end }}
    </ul>
    {{</highlight>}}
  
 Once I had created that simple list, I decided it might be nice to have a short list of all the posts I'd want to feature on my index page, sort of as a showcase. I kept trying lots of different ideas, but ultimately found this code to be the simplest and easiest.[fn:org-pages-1]
    
    {{<highlight html>}}
     <ul class="posts-list">
    {{range first 5 (where (where .Site.RegularPages "Type" "post") ".Params.featured" "==" "true") }}
        <li class="posts-list-item">
          <a class="posts-list-item-title" href="{{ .Permalink }}">{{ .Title }}</a>
          <span class="posts-list-item-description">
            {{ .Date.Format "02 Jan." }}
          </span>
        </li>
      {{ end }}
    </ul>
    {{</highlight>}}

However, once I had tested both the featured and recents code on the index page, certain posts would show up in both. I had tried to find some tiny bit of code that could work for both, but then I found the dumbest mistake I had made.

I had forgotten to filter my recent posts list.

Overall I had to nest one more =where= clause into my recent posts shortcode. While I can't set a direct number of posts to show right now, I'm going to keep adding to it to ensure I can do that, if I wanted to. This was the final bit of code I had, and what I currently use.

{{<highlight html>}}
<ul class="posts-list">
      {{ range first 5 (where (where .Site.RegularPages "Section" "blog") ".Params.featured" "!=" "true").ByDate.Reverse}}
      <li class="posts-list-item">
          <a class="posts-list-item-title" href="{{ .Permalink }}">{{ .Title }}</a>
          <span class="posts-list-item-description">
            {{ .Date.Format "02 Jan." }}
          </span>
        </li>
      {{ end }}
    </ul>
    {{</highlight>}}

[fn:org-pages-1] Although this does also include my Digital Studies blog, I will most likely be archiving those posts at the end of the semester - I'll still have access to them, but at the same time, if I had made a post for that class I was proud of, I could move it to my blog directory without much of an issue.
** DRAFT Developing A Hugo Theme
:PROPERTIES:
:EXPORT_FILE_NAME: developing-a-hugo-theme
:export_date:<2021-03-02 Tue 21:04> 
:END:
Although I truly love the [[https://github.com/lxndrblz/anatole][Anatole]] theme for Hugo, I found that while it was good for my blog, it wasn't as good for all of my use cases - primarily my resume, since I felt like the sidebar was too big and took away from the actual content of the resume, along with several other minor issues.[fn:dev-theme-1]  That being said, it is an excellent theme, and there were many things I liked about it when I was using it that I wanted to incorporate into my own theme, even with the modifications to layouts I had made over time to it.

    - Dark mode. It really should just be available on every site in 2021 without having to use a browser extension like [[https://github.com/darkreader/darkreader][Dark Reader]]. Even if a user doesn't want dark mode, at least having the option available is nice.
    - The clean aesthetic. I'm not totally sure how to explain it, but just the layout of the Anatole theme is very clean, and I really liked that.
    - Customizability. I love having the ability to tweak the theme to look exactly how I want to make it look. In addition, adding interactivity like a dashboard for my projects is incredibly helpful with custom javascript, as well as a basic search function for my blog posts.

With that in mind, I started looking into a framework I could use that could cover my requirements while still being relatively lightweight, and I finally came upon [[https://www.gethalfmoon.com][Halfmoon CSS]], an alternative to Bootstrap that came with a dark mode out of the box.

*** How I Got Started
Beyond just reading the documentation, I decided to play around with the version of Halfmoon hosted on a CDN just to try it out.


*** Building The Navbar

*** Building the Sidebars and `baseof` Layouts


[fn:dev-theme-1] While I could just use CSS for many of the things I talk about here, I wanted to work on a project I could add to my portfolio.

** DRAFT Configuring Worldbuilding Projects and Campaign Wikis with Hugo and Gitlab Pages
:PROPERTIES:
:EXPORT_FILE_NAME: configuring-worldbuilding-projects-hugo
:END:
*** Gitlab Pages
Talk about Gitlab Pages
*** Hugo Website
Talk about Hugo
*** Shortcodes
Explain about shortcodes here.
** DRAFT Adding Custom Pagination in Hugo
:PROPERTIES:
:EXPORT_DATE: <2020-12-15 Tue 22:55>
:EXPORT_FILE_NAME: custom-pagination-hugo
:END:

** Using A Makefile With My Website
:PROPERTIES:
:export_file_name: makefile-website
:export_date: <2021-03-12 Fri 17:47> 
:END:

It shouldn't be a surprise that I use Hugo as a static site generator. Not only is it fast, but it is also incredibly customizable, which is something that I find useful considering my website has so much stuff on it. In addition, being able to create shortcodes to avoid reusing code on certain pages is such a helpful tool for wikis. Finally, having support for Emacs' [[https://orgmode.org/][Org-Mode]] is what initially drew me to Hugo in the first place. I had tried using org-publish to try and set up a website, but had so many little issues with it that I decided to scrap it and keep looking around for a better way to set up a website. That was when I found Hugo, and decided to try it out. 


Ultimately, I found that when I was starting to create layouts and templates, typing the full =hugo server -D --navigateToChanged= was just long to type (yes, lazy, I know), especially when I was debugging an error with my shortcodes and templates. Being able just to type =make server= makes it much faster for me to debug code but also to get previews of code. 

*** Not Just For Debugging
Hugo also allows for content to be created with a certain [[https://gohugo.io/content-management/archetypes/][archetype]] - by default, this matches the directory you are creating the content for. As an example, if I had an archetype called =project.org=, if I ran =hugo new project/hello-world.org= the file =content/project/hello-world.org= would be created, with all the content needed for a blog post. Here's what my org-mode project archetype looks like:

#+begin_src org
#+title: {{ replace .Name "-" " " | title }} 
#+draft: true
#+srclang: 
#+srcicon: 
#+summary: 
#+type: project
#+featured: 
#+layout: single
#+percDone: 0
#+lastUpdated: 
#+docs:
#+projectSite:  
#+gitlab:
#+github:
#+bitbucket:
#+readmore: false 
#+end_src

Obviously that's a lot of custom parameters, so I'll try to go through line-by-line and explain what's going on.

The =title=, =draft=, =layout=, =type=, and =featured= parameters are all easy enough to understand, I feel like. The =srclang= represents the language or languages the project is written in - for my pyronsworn project, as an example, it's written in python. The =srcicon= is the icon to use to display next to the source language - it must be one of the languages or icons listed at [[https://devicon.dev/][devicon.dev]]. The =percDone= is used to fill the progress bar across from the source language - it represents how much is approximately done on the latest release of the project. The last 4 parameters are all different links to places where the project lives - additionally, you can set up a trello link, add a trello parameter to the project frontmatter, and you can see the link to the roadmap, though that isn't required. The =readmore= variable is used to provide a way to read a little bit more about the project before trying out the project.

While setting up a snippet could be useful for this, Hugo has the tools to do it automatically. However, the one thing I hadn't had much luck with was using the =read= command in a Makefile. Ultimately, I figured out the answer through an answer on [[https://unix.stackexchange.com/questions/322517/read-command-not-working-in-a-makefile][the Unix StackExchange]] which ultimately allowed me to read in user input when I ran a =Make= command. So now, instead of having to run =hugo new projects/some-project.org -k project=, I can just run =make project= and immediately get the template set up. While not a perfect setup, it's much easier to get going rather than using the full command or even creating an empty file in the right directory. And while I could set up different file formats in the Makefile, such as =post.org=, I feel like getting the initial functionality down is much more important than bonus features.

Here is my current Makefile for the website.
#+begin_src makefile
.PHONY: server post project

server:
	@hugo server -D --navigateToChanged --verbose 

post:
	@echo "Enter the file name (include the suffix): " && read filename; hugo new blog/$$filename -k post

project:
	@echo "Enter the file name (include the suffix): " && read filename; hugo new projects/$$filename -k project
#+end_src

* Software                                                        :@Software:
** Newsboat                                                       :@Newsboat:
*** Using Multireddits with Newsboat                  :rss:reddit:newsboat:
:PROPERTIES:
:EXPORT_FILE_NAME: multireddits-newsboat
:export_date: <2020-12-23 Wed 19:12> 
:END:
On Reddit, multireddits are a way of grouping multiple subreddits into a grouped feed. It's a nice way to keep my reddit organized so I can view the content that I really want to. 
# more
As an example, here is what my gaming-related feed in newsboat looks like:

#+attr_html: :width 60%
[[/pics/blog/subreddit_query.png]]

That is incredibly overwhelming, even if it is sorted by the date the post was published.

In my opinion, even keeping all the gaming subreddits I follow in a query feed could quickly become overwhelming since I follow a lot of game-related subreddits. 

As an example, I'm going to use some of the Crusader Kings and Destiny-related subreddits I follow for a gaming multireddit, but you can use whatever you want.

To start with, I created a multireddit for all the Crusader Kings-related content I wanted to follow. I called it "crusaderkings", but feel free to call it whatever you want. Once I had done that, I added several of the subreddits I wanted to follow - namely [[https://reddit.com/r/CrusaderKings][CrusaderKings]], [[https://reddit.com/r/CrusaderCharacters][CrusaderCharacters]], [[https://reddit.com/r/CKTinder][CKTinder]], and [[https://reddit.com/r/ck3_dnas][CK3_DNAs]]. While this list will most likely be updated in the future, four feeds is good enough for a start. Rinse and repeat this for whatever else you want to group together - for instance, maybe you follow several subreddits for a particular programming language. Really, it's limitless what you can group by.

Once you add your individual subreddits to your multireddit, it's incredibly easy to get an rss feed of you multireddit - just add ".rss" to the end of the url. Want to change your sorting order to be with the newest posts first? Just add "/new.rss" to your url. While searching can get a tiny bit more difficult, it really isn't that much more difficult. Only want text posts? Search "self:yes", and add ".rss" just before your query and just after the search in the url. As an example, the Crusader Kings multireddit I'm using here is [[https://old.reddit.com/user/jacobhilker1/m/crusaderkings.rss]]. 

Now, simply add the RSS url to your newsboat URLs file (usually =~/.newsboat/urls=) and you will get this when you view your multireddit feed (with my config, at least - yours may differ based on your =articlelist-view.=):

#+attr_html: :width 60%
[[/pics/blog/default_multi.png]]

While I'd like to print the exact subreddit each post is from, I am not entirely sure how to do that without adding some sort of tag for each multireddit. If I find a way to do that, I'll update this post.

Finally, I want to group my multireddits based on a certain category. Here is an example of what mine looks like, but yours may vary based on your configuration:

#+attr_html: :width 60%
[[/pics/blog/group_multi_index.png]]

Here is what it looks like when browsing a query feed:
#+attr_html: :width 60%
[[/pics/blog/multi_feed_view.png]]
*** DRAFT I Was Wrong About Multireddits... Sort Of
:properties:
:export_file_name: wrong-about-multis
:export_date: <2020-12-29 Tue 15:29>
:end:
If you saw [[/blog/2020/12/multireddits-with-newsboat][this post]] from a while ago,
** LaTeX                                                            :@LaTeX:
